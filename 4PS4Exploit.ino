//Francesco Gerratana 2018-2022 www.nextechnics.com
#include <ESP8266FtpServer.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <DNSServer.h>
#include <FS.h>

//#define NO_CONFIG 1
bool noConfig = false;
#define DBG_OUTPUT_PORT Serial

//DNS settings
const byte DNS_PORT = 53;
DNSServer dnsServer;

ESP8266WebServer server( 80 );
String host = "4psp4";

//AP settings
bool revertToAP = false;
IPAddress local_IP( 10, 13, 37, 1 );
IPAddress gateway( 10, 13, 37, 9 );
IPAddress subnet( 255, 255, 255, 0 );

//default settings
String wifiMode = "ap";
String apName = "4psp4";
String apKey = "4psp4pwd";
String stName = "yourrouter";
String stKey = "routerpassword";
String stAddress = "235";

#define resetPin D5


void loadConfig() {

  File file = SPIFFS.open( "/settings.ini", "r" );

  if ( !file ) {

    DBG_OUTPUT_PORT.println( "settings.ini couldn't be opened!" );
    return;

  }

  String thisLine;

  while ( 1 ) {

    thisLine = file.readStringUntil( '\r' );
    thisLine.trim();
    if ( thisLine.indexOf( "wifimode=" ) == 0 ) wifiMode = thisLine.substring( 9 );
    if ( thisLine.indexOf( "apname=" ) == 0 ) apName = thisLine.substring( 7 );
    if ( thisLine.indexOf( "apkey=" ) == 0 ) apKey = thisLine.substring( 6 );
    if ( thisLine.indexOf( "stname=" ) == 0 ) stName = thisLine.substring( 7 );
    if ( thisLine.indexOf( "stkey=" ) == 0 ) stKey = thisLine.substring( 6 );
    if ( thisLine.indexOf( "staddress=" ) == 0 ) stAddress = thisLine.substring( 10 );
    if ( ( thisLine.length() == 0 ) || !thisLine.indexOf( "=" ) ) break;

  }

  file.close();
  DBG_OUTPUT_PORT.println( "settings.ini loaded" );

}

void saveConfig() {

  File file = SPIFFS.open( "/settings.ini", "w" );

  for (int i = 0; i < server.args(); i++ ) {

    String settingsLine = server.argName( i ) + "=" + server.arg( i );
    file.println( settingsLine.c_str() );

  }

  file.close();
  file = SPIFFS.open( "/settings.ini", "r" );
  char tempChar[ 400 ];
  file.readBytes( tempChar, 400 );
  DBG_OUTPUT_PORT.println( tempChar );
  file.close();
  loadConfig();

}

String getContentType( String filename ) {

  if ( server.hasArg( "download" ) ) return "application/octet-stream";
  else if( filename.endsWith( ".htm") ) return "text/html";
  else if( filename.endsWith( ".html" ) ) return "text/html";
  else if( filename.endsWith( ".css" ) ) return "text/css";
  else if( filename.endsWith( ".js" ) ) return "application/javascript";
  else if( filename.endsWith( ".png" ) ) return "image/png";
  else if( filename.endsWith( ".gif" ) ) return "image/gif";
  else if( filename.endsWith( ".jpg" ) ) return "image/jpeg";
  else if( filename.endsWith( ".ico" ) ) return "image/x-icon";
  else if( filename.endsWith( ".gz" ) ) return "application/x-gzip";
  else if( filename.endsWith( ".woff" ) ) return "application/font-woff";
  else if( filename.endsWith( ".woff2" ) ) return "application/font-woff2";
  else if( filename.endsWith( ".json" ) ) return "application/json";
  return "text/plain";

}

bool handleFileRead(String path){
	
  path = path.substring( path.lastIndexOf( "/" ) );//io
  
  DBG_OUTPUT_PORT.println("handleFileRead: " + path);
  //if(path.endsWith("/")) path += "index.html";
  if ( path.endsWith( "/" ) ) path = "/index.html";//io
  if ( path.length()  < 3 ) path = "/index.html";//io
  String contentType = getContentType(path);
  String pathWithGz = path + ".gz";
  if(SPIFFS.exists(pathWithGz) || SPIFFS.exists(path)){
    if(SPIFFS.exists(pathWithGz))
      path += ".gz";
    File file = SPIFFS.open(path, "r");
    size_t sent = server.streamFile(file, contentType);
    file.close();
    return true;
  }
  return false;
}


FtpServer ftpSrv; 

void setup( void ) {

  pinMode( resetPin, INPUT_PULLUP );
  pinMode( LED_BUILTIN, OUTPUT );
  digitalWrite( LED_BUILTIN, HIGH );

  WiFi.forceSleepBegin();
  DBG_OUTPUT_PORT.begin( 115200 );
  DBG_OUTPUT_PORT.print( "\n" );
 
  SPIFFS.begin();
  ftpSrv.begin(apName,apKey);
  

  Dir dir = SPIFFS.openDir( "/" );
  
  	server.serveStatic("/data.json", SPIFFS, "/data.json");
	server.serveStatic("/index.html", SPIFFS, "/index.html");
	server.serveStatic("/fontawesome.css", SPIFFS, "/fontawesome.css");
	server.serveStatic("/stile.css", SPIFFS, "/stile.css");
	server.serveStatic("/setting.css", SPIFFS, "/setting.css");
	server.serveStatic("/fasolid900.woff2", SPIFFS, "/fasolid900.woff2");
	server.serveStatic("/opensans.woff", SPIFFS, "/opensans.woff");
	server.serveStatic("/fasolid900.woff", SPIFFS, "/fasolid900.woff");
	server.serveStatic("/icon.png", SPIFFS, "/icon.png");
	server.serveStatic("/inp.png", SPIFFS, "/inp.png");

  if ( digitalRead( resetPin ) == LOW ) {

    DBG_OUTPUT_PORT.println( "Config loading bypassed!" );
    noConfig = true;
    wifiMode = "ap";

  }

#ifndef NO_CONFIG

  if ( noConfig == false ) loadConfig();

#endif

  if ( wifiMode == "ap" ) {

    WiFi.mode( WIFI_AP );

    if ( WiFi.softAPConfig( local_IP, gateway, subnet ) == false ) {

      DBG_OUTPUT_PORT.println( "Couldn't create AP" );

    }
    else {

      DBG_OUTPUT_PORT.printf( "Creating AP " );
      DBG_OUTPUT_PORT.println( apName );

    }

    while ( WiFi.softAP( apName.c_str(), apKey.c_str() ) == false ) {

      delay( 500 );
      DBG_OUTPUT_PORT.print( "." );

    }

    if ( WiFi.softAPIP() == IPAddress( 0, 0, 0, 0 ) ) revertToAP = true;
    else {

      DBG_OUTPUT_PORT.println( "" );
      DBG_OUTPUT_PORT.print( "Connected! IP address: " );
      DBG_OUTPUT_PORT.println( WiFi.softAPIP() );

    }

  }
  else {

    DBG_OUTPUT_PORT.printf( "Connecting to %s\n", stName.c_str() );
    WiFi.mode( WIFI_STA );
    WiFi.begin( stName.c_str(), stKey.c_str() );

    int reconCounter = 0;

    while ( WiFi.status() != WL_CONNECTED ) {

      delay( 500 );
      DBG_OUTPUT_PORT.print( "." );

      reconCounter++;

      if ( reconCounter == 20 ) {

        revertToAP = true;
        break;

      }

    }

    IPAddress tempIP = WiFi.localIP();
    IPAddress goodIP = WiFi.localIP();
    IPAddress tempSubnet = WiFi.subnetMask();
    char changed = 0;

    for (int i = 0; i < 4; i++ ) {

      if (  tempSubnet[ i ] == 0 ) {

        tempIP[ i ] = stAddress.toInt();
        changed++;

      }

    }

    if (changed == 1 ) {

      WiFi.config( tempIP , WiFi.gatewayIP(), WiFi.subnetMask(), WiFi.dnsIP() );
      reconCounter = 0;

      while ( WiFi.status() != WL_CONNECTED ) {

        delay( 500 );
        DBG_OUTPUT_PORT.print( "." );

        reconCounter++;

        WiFi.config( goodIP , WiFi.gatewayIP(), WiFi.subnetMask(), WiFi.dnsIP() ); //revert back in case of collision, etc.

        if ( reconCounter == 20 ) {

          revertToAP = true;
          break;

        }

      }

    }

    if ( WiFi.localIP() == IPAddress( 0, 0, 0, 0 ) ) revertToAP = true;
    else {

      DBG_OUTPUT_PORT.println( "" );
      DBG_OUTPUT_PORT.print( "Connected! IP address: " );
      DBG_OUTPUT_PORT.println( WiFi.localIP() );

    }

  }

  if ( revertToAP == true ) {

    DBG_OUTPUT_PORT.println( "Reverting to default AP" );
    wifiMode = "ap";
    WiFi.mode( WIFI_AP );
    WiFi.softAPConfig( local_IP, gateway, subnet );

  }

  if ( noConfig == true ) loadConfig();
  MDNS.begin( host.c_str()  );

  if ( wifiMode == "ap" ) dnsServer.start( DNS_PORT, "*", WiFi.softAPIP() );
  else dnsServer.start( DNS_PORT, "*", WiFi.localIP() );

  server.onNotFound( []() {

    if ( !handleFileRead( server.uri() ) ) {

      DBG_OUTPUT_PORT.printf( "URI not found " );
      digitalWrite( LED_BUILTIN, LOW );
      delay (500);
      digitalWrite( LED_BUILTIN, HIGH );


    }
  

  } );

  server.on( "/", HTTP_GET, [] () {

    handleFileRead( "/index.html" );

  } );

  server.on( "/settings", HTTP_GET, [] () {

    String sPage;

    if ( server.args() > 0 ) {

      saveConfig();
      sPage = "<HTML><HEAD><meta http-equiv=\"refresh\" content=\"1; url=/index.html\"/></HEAD><TITLE>PS4 Exploit Settings</TITLE><BODY>Settings saved. Reset the card if network settings were changed!</BODY></HTML>";
      server.send( 200, "text/html", sPage );
      return;

    }

    loadConfig();
	FSInfo fs_info;
    SPIFFS.info(fs_info);
    int Flashfree = fs_info.totalBytes - fs_info.usedBytes;
    sPage="<HTML>";
    sPage+="<HEAD>";
    sPage+="<LINK REL=\"icon\" TYPE=\"image/png\" HREF=\"icon.png\"/>";
    sPage+="<LINK REL=\"stylesheet\" type=\"text/css\" href=\"setting.css\"/>";
    sPage+="<LINK REL=\"stylesheet\" type=\"text/css\" href=\"fontawesome.css\"/>";
    sPage+="<TITLE>PS4 Light Settings</TITLE>";
    sPage+="</HEAD><BODY>";
	sPage+="<p class=\"txt\">Board info</p>";
	sPage+="<p class=\"txt2\">";
	sPage+="<b>SDK Version = </b>";                                 
	sPage+=ESP.getSdkVersion();
	sPage+="<br><b> Boot Version = </b>";
	sPage+=ESP.getBootVersion();
	sPage+="<br><b> Free Sketch Space  = </b>";
	sPage+=((uint32_t)ESP.getFreeSketchSpace()/1024);
	sPage+=" KBytes<br><b>  Sketch Size  = </b>";
	sPage+=((uint32_t)ESP.getSketchSize()/1024);
	sPage+=" KBytes<br><b> Flash Chip Id = </b>";
	sPage +=((uint32_t)ESP.getFlashChipId()/1024);
	sPage +="<br><b> CoreVersion = </b>";
	sPage +=ESP.getCoreVersion();
	sPage +="<br><b> Cpu Freq MHz = </b>";
	sPage +=ESP.getCpuFreqMHz();
	sPage +=" MHz<br><b> Sketch MD5 = </b>";
	sPage +=ESP.getSketchMD5();
	sPage +="<br><b> Flash Chip Size = </b>";
	sPage +=((uint32_t)ESP.getFlashChipSize()/1024);
	sPage +=" KBytes<br><b> Flash Chip Real Size = </b>";
	sPage +=((uint32_t)ESP.getFlashChipRealSize()/1024);
	sPage +=" KBytes<br><b> Flash Chip Speed = </b>";
	sPage +=(ESP.getFlashChipSpeed()/1000000);
	sPage +=" MHz<br><b> Last Reset = </b>";
	sPage +=ESP.getResetReason();
	sPage +=" <br><b>Total size of useful data on the file system = </b>";
	sPage +=((uint32_t)fs_info.totalBytes/1024);
	sPage +=" KBytes<br><b>Number of bytes used by files = </b>";
	sPage +=((uint32_t)fs_info.usedBytes/1024);
	sPage +=" KBytes<br><b>Flash free space = </b>";
	sPage +=((uint32_t)Flashfree/1024);
	sPage +=" KBytes<br><b> SPIFFS block size = </b>";
	sPage +=fs_info.blockSize;
    sPage +=" Bytes<br><b> SPIFFS page size = </b>";
    sPage +=fs_info.pageSize;
	sPage +=" Bytes<br><b> Max Open File simultaneously = </b>";
    sPage +=fs_info.maxOpenFiles;
	sPage +=" Files<br><b> Max file name length = </b>";
    sPage +=fs_info.maxPathLength;
	sPage +=" Chars<br>";
	sPage += "<FORM ID=\"form1\">\n <P class=\"txt\">Wifi Mode</P>\n<DIV STYLE=\"margin-left: 1em;\">\n<INPUT TYPE =\"radio\" ID=\"ap\" NAME=\"wifimode\" VALUE=\"ap\" class=\"css-checkbox\"";
    if ( wifiMode == "ap" ) sPage +=  " checked";
    sPage += ">\n<LABEL FOR=\"ap\"  class=\"css-label radGroup1\">Access Point</LABEL>\n<BR></BR>\n";
    sPage += "<DIV STYLE=\"margin-left: 2em;\">\nName: <INPUT ID=\"apname\" TYPE=\"text\" NAME=\"apname\" VALUE=\"" + apName + "\" onkeyup=\"apnameverify()\" class=\"css-input\">\n<LABEL ID=\"apnamelabel\"></LABEL>\n<BR></BR>\n";
    sPage += "Password: <INPUT TYPE=\"password\" ID=\"apkey\" NAME=\"apkey\" VALUE=\"" + apKey + "\" onkeyup=\"apkeyverify()\"  class=\"css-input\">\n<LABEL ID=\"apkeylabel\"></LABEL>\n<BR></BR>\n</DIV>\n";
    sPage += "<INPUT TYPE =\"radio\" ID=\"sta\" NAME=\"wifimode\" VALUE=\"sta\" class=\"css-checkbox\"";
    if ( wifiMode == "sta" ) sPage += " checked";  
    sPage += ">\n<LABEL FOR=\"sta\" class=\"css-label radGroup1\">Station</LABEL>\n<BR></BR>\n</DIV>\n<DIV STYLE=\"margin-left: 2em;\">\n";
    int n = WiFi.scanNetworks();
    
    if ( n == 0 ) sPage += "No networks found.\n<BR></BR>";
    else {
      
      for (int i = 0; i < n; ++i) {

        sPage += "<INPUT TYPE =\"radio\" ID=\"station" + String(i) + "\" NAME=\"stname\" VALUE=\"" + WiFi.SSID(i) + "\" ";
        if ( WiFi.SSID(i) == stName ) sPage += "checked";
        sPage += ">\n<LABEL FOR=\"station" + String(i, DEC) + "\">" + WiFi.SSID(i);
        if ( WiFi.encryptionType(i) == ENC_TYPE_NONE ) sPage += " (open)";
        sPage += "</LABEL>\n<BR></BR>\n";
	 }
      
      sPage += "<DIV STYLE=\"margin-left: 2em;\">\nPassword: <INPUT TYPE=\"password\" NAME=\"stkey\" VALUE=\"" + stKey + "\" class=\"css-input\">\n<BR></BR>\n";
      sPage += "Static IP: <INPUT TYPE=\"text\" ID=\"staddress\" NAME=\"staddress\" VALUE=\"" + stAddress + "\" onkeypress=\"return isNumber(event)\" onkeyup=\"staddressverify()\" class=\"css-input\">\n<LABEL ID=\"staddresslabel\"></LABEL>\n<BR></BR>\n</DIV>\n";
    }
    
    sPage += "</DIV>";

    sPage += "\n<DIV>\n</FORM>\n<BUTTON TYPE=\"submit\" ID=\"submitbtn\" FORM=\"form1\" VALUE=\"Submit\">Save</BUTTON>\n\n";
    sPage += "<SCRIPT>\n\nfunction apnameverify() {\nendissubmit();\nif ( apname.value.length < 1 ) {\ndocument.getElementById('apnamelabel').innerHTML = \"Fill in an AP name\";\n}\nelse { document.getElementById('apnamelabel').innerHTML = \"\";\n}\n}\n";
    sPage += "\nfunction apkeyverify() {\nendissubmit();\nif ( apkey.value.length < 8 ) {\ndocument.getElementById('apkeylabel').innerHTML = \"Password must be at least 8 characters in length\";\n}\nelse { document.getElementById('apkeylabel').innerHTML = \"\";\n}\n}\n";
    sPage += "\nfunction endissubmit() {\nif ( ( apname.value.length < 1 ) || ( apkey.value.length < 8 ) ) {\nsubmitbtn.disabled = true;\n}\nelse {\nsubmitbtn.disabled = false;\n}\n}\n";
    sPage += "\nfunction isNumber( evt ) {\nnevt = ( evt ) ? evt : window.event;\nvar charCode = ( evt.which ) ? evt.which : evt.keyCode;\nif ( charCode > 31 && ( charCode < 48 || charCode > 57 ) ) {\nreturn false;\n}\nreturn true;\n}\n";
    sPage += "\nfunction staddressverify() {\nvar x= parseInt( staddress.value );\nif ( staddress.value == \"\" || ( ( x < 2 ) || ( x > 255 ) ) ) {\ndocument.getElementById('staddresslabel').innerHTML = \"Must be in range of 2 to 255\";\n}\nelse {\ndocument.getElementById('staddresslabel').innerHTML = \"\";\n}\n}\n\n";
    sPage += "</SCRIPT>\n</DIV>\n</BODY>\n</HTML>";
    
    server.send( 200, "text/html", sPage );


  } );

  server.begin();
  DBG_OUTPUT_PORT.println( "HTTP server started" );

}

void loop( void ) {

  ftpSrv.handleFTP();

  dnsServer.processNextRequest();
  server.handleClient();

}




